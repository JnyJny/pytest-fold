=================================================================== test session starts ====================================================================
platform darwin -- Python 3.10.0b2, pytest-6.2.5, py-1.10.0, pluggy-1.0.0
rootdir: /Users/jwr003/coding/pytest-fold, configfile: pyproject.toml, testpaths: tests
plugins: session2file-0.1.11
collecting ...
collected 18 items

tests/test_pytest_fold.py .F.F.F.FFF...FF..E                                                                                                         [100%]

========================================================================== ERRORS ==========================================================================
_______________________________________________________ ERROR at setup of test_fixture_for_fun_fail ________________________________________________________
file /Users/jwr003/coding/pytest-fold/tests/test_pytest_fold.py, line 135
  def test_fixture_for_fun_fail(fixture_for_fun):
E       fixture 'fixture_for_fun' not found
>       available fixtures: cache, capfd, capfdbinary, caplog, capsys, capsysbinary, doctest_namespace, fold, monkeypatch, pytestconfig, record_property, record_testsuite_property, record_xml_attribute, recwarn, tmp_path, tmp_path_factory, tmpdir, tmpdir_factory
>       use 'pytest --fixtures [testpath]' for help on them.

/Users/jwr003/coding/pytest-fold/tests/test_pytest_fold.py:135
========================================================================= FAILURES =========================================================================
____________________________________________________________________ test_which_fails_1 ____________________________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10d3cad40>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_which_fails_1>}, argname = 'item', firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_which_fails_1>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d4bec80>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_which_fails_1>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_which_fails_1>}, argname = 'pyfuncitem', firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_which_fails_1>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d4beec0>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_which_fails_1>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    [94mdef[39;49;00m [92mtest_which_fails_1[39;49;00m():
>       [94massert[39;49;00m [94m0[39;49;00m
E       assert 0

tests/test_pytest_fold.py:18: AssertionError
==>MARKER2<==
____________________________________________________________________ test_which_fails_2 ____________________________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10d456050>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_which_fails_2>}, argname = 'item', firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_which_fails_2>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_2>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d533d90>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_2>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_2>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_2>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_which_fails_2>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_which_fails_2>}, argname = 'pyfuncitem', firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_which_fails_2>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_2>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d533c40>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_2>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_which_fails_2>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    [94mdef[39;49;00m [92mtest_which_fails_2[39;49;00m():
>       [94massert[39;49;00m [94m0[39;49;00m
E       assert 0

tests/test_pytest_fold.py:26: AssertionError
==>MARKER2<==
____________________________________________________________________ test_which_fails_3 ____________________________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10d4f7910>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_which_fails_3>}, argname = 'item', firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_which_fails_3>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_3>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d5dbe20>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_3>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_3>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_3>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_which_fails_3>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_which_fails_3>}, argname = 'pyfuncitem', firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_which_fails_3>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_3>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d5dbd90>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_3>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_which_fails_3>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    [94mdef[39;49;00m [92mtest_which_fails_3[39;49;00m():
>       [94massert[39;49;00m [94m0[39;49;00m
E       assert 0

tests/test_pytest_fold.py:34: AssertionError
==>MARKER2<==
_______________________________________________________________________ test_fail_1 ________________________________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10d457490>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_fail_1>}, argname = 'item', firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_fail_1>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_fail_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d50f370>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_fail_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_fail_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_fail_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_fail_1>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_fail_1>}, argname = 'pyfuncitem', firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_fail_1>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_fail_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d50fa90>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_fail_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_fail_1>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    [94mdef[39;49;00m [92mtest_fail_1[39;49;00m():
        a = [94m0[39;49;00m
        time.sleep([94m0.05[39;49;00m)
>       [94massert[39;49;00m [94mFalse[39;49;00m
E       assert False

tests/test_pytest_fold.py:74: AssertionError
==>MARKER2<==
_______________________________________________________________________ test_fail_2 ________________________________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10cbaf760>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_fail_2>}, argname = 'item', firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_fail_2>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_fail_2>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10cbab640>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_fail_2>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_fail_2>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_fail_2>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_fail_2>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_fail_2>}, argname = 'pyfuncitem', firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_fail_2>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_fail_2>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10cbab010>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_fail_2>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_fail_2>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    [94mdef[39;49;00m [92mtest_fail_2[39;49;00m():
        a = [94m0[39;49;00m
        time.sleep([94m0.05[39;49;00m)
>       [94massert[39;49;00m [94mFalse[39;49;00m
E       assert False

tests/test_pytest_fold.py:80: AssertionError
==>MARKER2<==
_______________________________________________________________________ test_fail_3 ________________________________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10cbaf370>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_fail_3>}, argname = 'item', firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_fail_3>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_fail_3>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d3a6410>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_fail_3>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_fail_3>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_fail_3>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_fail_3>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_fail_3>}, argname = 'pyfuncitem', firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_fail_3>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_fail_3>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d3a5f00>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_fail_3>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_fail_3>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

    [94mdef[39;49;00m [92mtest_fail_3[39;49;00m():
        a = [94m0[39;49;00m
        time.sleep([94m0.05[39;49;00m)
>       [94massert[39;49;00m [94mFalse[39;49;00m
E       assert False

tests/test_pytest_fold.py:86: AssertionError
==>MARKER2<==
____________________________________________________________ test_which_fails_and_has_stdout_1 _____________________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10cbaf910>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_which_fails_and_has_stdout_1>}, argname = 'item'
firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_which_fails_and_has_stdout_1>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_and_has_stdout_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d4bf910>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_fails_and_has_stdout_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_and_has_stdout_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_fails_and_has_stdout_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_which_fails_and_has_stdout_1>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_which_fails_and_has_stdout_1>}, argname = 'pyfuncitem'
firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_which_fails_and_has_stdout_1>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_and_has_stdout_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10d4bde70>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_fails_and_has_stdout_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_which_fails_and_has_stdout_1>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

capsys = <_pytest.capture.CaptureFixture object at 0x10d4be4d0>

    [94mdef[39;49;00m [92mtest_which_fails_and_has_stdout_1[39;49;00m(capsys):
        [96mprint[39;49;00m([33m"[39;49;00m[33mthis test fails[39;49;00m[33m"[39;49;00m)
>       [94massert[39;49;00m [94m0[39;49;00m == [94m1[39;49;00m
E       assert 0 == 1

tests/test_pytest_fold.py:109: AssertionError
==>MARKER2<==
------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------
this test fails
_______________________________________________________ test_which_pauses_and_fails_and_has_stdout_1 _______________________________________________________

cls = <class '_pytest.runner.CallInfo'>, func = <function call_runtest_hook.<locals>.<lambda> at 0x10d456050>, when = 'call'
reraise = (<class '_pytest.outcomes.Exit'>, <class 'KeyboardInterrupt'>)

==>MARKER1<==
    [37m@classmethod[39;49;00m
    [94mdef[39;49;00m [92mfrom_call[39;49;00m(
        [96mcls[39;49;00m,
        func: [33m"[39;49;00m[33mCallable[[], TResult][39;49;00m[33m"[39;49;00m,
        when: [33m"[39;49;00m[33mLiteral[[39;49;00m[33m'[39;49;00m[33mcollect[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33msetup[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mcall[39;49;00m[33m'[39;49;00m[33m, [39;49;00m[33m'[39;49;00m[33mteardown[39;49;00m[33m'[39;49;00m[33m][39;49;00m[33m"[39;49;00m,
        reraise: Optional[
            Union[Type[[96mBaseException[39;49;00m], Tuple[Type[[96mBaseException[39;49;00m], ...]]
        ] = [94mNone[39;49;00m,
    ) -> [33m"[39;49;00m[33mCallInfo[TResult][39;49;00m[33m"[39;49;00m:
        excinfo = [94mNone[39;49;00m
        start = timing.time()
        precise_start = timing.perf_counter()
        [94mtry[39;49;00m:
>           result: Optional[TResult] = func()

.venv/lib/python3.10/site-packages/_pytest/runner.py:311:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

>       [94mlambda[39;49;00m: ihook(item=item, **kwds), when=when, reraise=reraise
    )

.venv/lib/python3.10/site-packages/_pytest/runner.py:255:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_runtest_call'>, args = (), kwargs = {'item': <Function test_which_pauses_and_fails_and_has_stdout_1>}, argname = 'item'
firstresult = False

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_runtest_call'
methods = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
kwargs = {'item': <Function test_which_pauses_and_fails_and_has_stdout_1>}, firstresult = False

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_pauses_and_fails_and_has_stdout_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10cbab5b0>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_runtest_call'
hook_impls = [<HookImpl plugin_name='runner', plugin=<module '_pytest.runner' from '/Users/jwr003/coding/pytest-fold/.venv/lib/pyth...readexception' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/threadexception.py'>>]
caller_kwargs = {'item': <Function test_which_pauses_and_fails_and_has_stdout_1>}, firstresult = False

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_pauses_and_fails_and_has_stdout_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
            item.runtest()
        [94mexcept[39;49;00m [96mException[39;49;00m [94mas[39;49;00m e:
            [90m# Store trace info to allow postmortem debugging[39;49;00m
            sys.last_type = [96mtype[39;49;00m(e)
            sys.last_value = e
            [94massert[39;49;00m e.__traceback__ [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m
            [90m# Skip *this* frame[39;49;00m
            sys.last_traceback = e.__traceback__.tb_next
>           [94mraise[39;49;00m e

.venv/lib/python3.10/site-packages/_pytest/runner.py:170:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

item = <Function test_which_pauses_and_fails_and_has_stdout_1>

    [94mdef[39;49;00m [92mpytest_runtest_call[39;49;00m(item: Item) -> [94mNone[39;49;00m:
        _update_current_test_var(item, [33m"[39;49;00m[33mcall[39;49;00m[33m"[39;49;00m)
        [94mtry[39;49;00m:
            [94mdel[39;49;00m sys.last_type
            [94mdel[39;49;00m sys.last_value
            [94mdel[39;49;00m sys.last_traceback
        [94mexcept[39;49;00m [96mAttributeError[39;49;00m:
            [94mpass[39;49;00m
        [94mtry[39;49;00m:
>           item.runtest()

.venv/lib/python3.10/site-packages/_pytest/runner.py:162:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <Function test_which_pauses_and_fails_and_has_stdout_1>

    [94mdef[39;49;00m [92mruntest[39;49;00m([96mself[39;49;00m) -> [94mNone[39;49;00m:
        [33m"""Execute the underlying test function."""[39;49;00m
>       [96mself[39;49;00m.ihook.pytest_pyfunc_call(pyfuncitem=[96mself[39;49;00m)

.venv/lib/python3.10/site-packages/_pytest/python.py:1641:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_HookCaller 'pytest_pyfunc_call'>, args = (), kwargs = {'pyfuncitem': <Function test_which_pauses_and_fails_and_has_stdout_1>}
argname = 'pyfuncitem', firstresult = True

    [94mdef[39;49;00m [92m__call__[39;49;00m([96mself[39;49;00m, *args, **kwargs):
        [94mif[39;49;00m args:
            [94mraise[39;49;00m [96mTypeError[39;49;00m([33m"[39;49;00m[33mhook calling supports only keyword arguments[39;49;00m[33m"[39;49;00m)
        [94massert[39;49;00m [95mnot[39;49;00m [96mself[39;49;00m.is_historic()

        [90m# This is written to avoid expensive operations when not needed.[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m.spec:
            [94mfor[39;49;00m argname [95min[39;49;00m [96mself[39;49;00m.spec.argnames:
                [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m kwargs:
                    notincall = [96mtuple[39;49;00m([96mset[39;49;00m([96mself[39;49;00m.spec.argnames) - kwargs.keys())
                    warnings.warn(
                        [33m"[39;49;00m[33mArgument(s) [39;49;00m[33m{}[39;49;00m[33m which are declared in the hookspec [39;49;00m[33m"[39;49;00m
                        [33m"[39;49;00m[33mcan not be found in this hook call[39;49;00m[33m"[39;49;00m.format(notincall),
                        stacklevel=[94m2[39;49;00m,
                    )
                    [94mbreak[39;49;00m

            firstresult = [96mself[39;49;00m.spec.opts.get([33m"[39;49;00m[33mfirstresult[39;49;00m[33m"[39;49;00m)
        [94melse[39;49;00m:
            firstresult = [94mFalse[39;49;00m

>       [94mreturn[39;49;00m [96mself[39;49;00m._hookexec([96mself[39;49;00m.name, [96mself[39;49;00m.get_hookimpls(), kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_hooks.py:265:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <_pytest.config.PytestPluginManager object at 0x10c6f7910>, hook_name = 'pytest_pyfunc_call'
methods = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
kwargs = {'pyfuncitem': <Function test_which_pauses_and_fails_and_has_stdout_1>}, firstresult = True

    [94mdef[39;49;00m [92m_hookexec[39;49;00m([96mself[39;49;00m, hook_name, methods, kwargs, firstresult):
        [90m# called from all hookcaller instances.[39;49;00m
        [90m# enable_tracing will set its own wrapping function at self._inner_hookexec[39;49;00m
>       [94mreturn[39;49;00m [96mself[39;49;00m._inner_hookexec(hook_name, methods, kwargs, firstresult)

.venv/lib/python3.10/site-packages/pluggy/_manager.py:80:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_pauses_and_fails_and_has_stdout_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
                        res = hook_impl.function(*args)
                        [94mif[39;49;00m res [95mis[39;49;00m [95mnot[39;49;00m [94mNone[39;49;00m:
                            results.append(res)
                            [94mif[39;49;00m firstresult:  [90m# halt further impl calls[39;49;00m
                                [94mbreak[39;49;00m
            [94mexcept[39;49;00m [96mBaseException[39;49;00m:
                excinfo = sys.exc_info()
        [94mfinally[39;49;00m:
            [94mif[39;49;00m firstresult:  [90m# first result hooks return a single value[39;49;00m
                outcome = _Result(results[[94m0[39;49;00m] [94mif[39;49;00m results [94melse[39;49;00m [94mNone[39;49;00m, excinfo)
            [94melse[39;49;00m:
                outcome = _Result(results, excinfo)

            [90m# run all wrapper post-yield blocks[39;49;00m
            [94mfor[39;49;00m gen [95min[39;49;00m [96mreversed[39;49;00m(teardowns):
                [94mtry[39;49;00m:
                    gen.send(outcome)
                    _raise_wrapfail(gen, [33m"[39;49;00m[33mhas second yield[39;49;00m[33m"[39;49;00m)
                [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                    [94mpass[39;49;00m

>           [94mreturn[39;49;00m outcome.get_result()

.venv/lib/python3.10/site-packages/pluggy/_callers.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

self = <pluggy._result._Result object at 0x10cbaa6e0>

    [94mdef[39;49;00m [92mget_result[39;49;00m([96mself[39;49;00m):
        [33m"""Get the result(s) for this hook call.[39;49;00m
    [33m[39;49;00m
    [33m    If the hook was marked as a ``firstresult`` only a single value[39;49;00m
    [33m    will be returned otherwise a list of results.[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        [94mif[39;49;00m [96mself[39;49;00m._excinfo [95mis[39;49;00m [94mNone[39;49;00m:
            [94mreturn[39;49;00m [96mself[39;49;00m._result
        [94melse[39;49;00m:
            ex = [96mself[39;49;00m._excinfo
>           [94mraise[39;49;00m ex[[94m1[39;49;00m].with_traceback(ex[[94m2[39;49;00m])

.venv/lib/python3.10/site-packages/pluggy/_result.py:60:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

hook_name = 'pytest_pyfunc_call'
hook_impls = [<HookImpl plugin_name='python', plugin=<module '_pytest.python' from '/Users/jwr003/coding/pytest-fold/.venv/lib/python3.10/site-packages/_pytest/python.py'>>]
caller_kwargs = {'pyfuncitem': <Function test_which_pauses_and_fails_and_has_stdout_1>}, firstresult = True

    [94mdef[39;49;00m [92m_multicall[39;49;00m(hook_name, hook_impls, caller_kwargs, firstresult):
        [33m"""Execute a call into multiple python functions/methods and return the[39;49;00m
    [33m    result(s).[39;49;00m
    [33m[39;49;00m
    [33m    ``caller_kwargs`` comes from _HookCaller.__call__().[39;49;00m
    [33m    """[39;49;00m
        __tracebackhide__ = [94mTrue[39;49;00m
        results = []
        excinfo = [94mNone[39;49;00m
        [94mtry[39;49;00m:  [90m# run impl and wrapper setup functions in a loop[39;49;00m
            teardowns = []
            [94mtry[39;49;00m:
                [94mfor[39;49;00m hook_impl [95min[39;49;00m [96mreversed[39;49;00m(hook_impls):
                    [94mtry[39;49;00m:
                        args = [caller_kwargs[argname] [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames]
                    [94mexcept[39;49;00m [96mKeyError[39;49;00m:
                        [94mfor[39;49;00m argname [95min[39;49;00m hook_impl.argnames:
                            [94mif[39;49;00m argname [95mnot[39;49;00m [95min[39;49;00m caller_kwargs:
                                [94mraise[39;49;00m HookCallError(
                                    [33mf[39;49;00m[33m"[39;49;00m[33mhook call must provide argument [39;49;00m[33m{[39;49;00margname[33m!r}[39;49;00m[33m"[39;49;00m
                                )

                    [94mif[39;49;00m hook_impl.hookwrapper:
                        [94mtry[39;49;00m:
                            gen = hook_impl.function(*args)
                            [96mnext[39;49;00m(gen)  [90m# first yield[39;49;00m
                            teardowns.append(gen)
                        [94mexcept[39;49;00m [96mStopIteration[39;49;00m:
                            _raise_wrapfail(gen, [33m"[39;49;00m[33mdid not yield[39;49;00m[33m"[39;49;00m)
                    [94melse[39;49;00m:
>                       res = hook_impl.function(*args)

.venv/lib/python3.10/site-packages/pluggy/_callers.py:39:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

pyfuncitem = <Function test_which_pauses_and_fails_and_has_stdout_1>

    [37m@hookimpl[39;49;00m(trylast=[94mTrue[39;49;00m)
    [94mdef[39;49;00m [92mpytest_pyfunc_call[39;49;00m(pyfuncitem: [33m"[39;49;00m[33mFunction[39;49;00m[33m"[39;49;00m) -> Optional[[96mobject[39;49;00m]:
        testfunction = pyfuncitem.obj
        [94mif[39;49;00m is_async_function(testfunction):
            async_warn_and_skip(pyfuncitem.nodeid)
        funcargs = pyfuncitem.funcargs
        testargs = {arg: funcargs[arg] [94mfor[39;49;00m arg [95min[39;49;00m pyfuncitem._fixtureinfo.argnames}
>       result = testfunction(**testargs)

.venv/lib/python3.10/site-packages/_pytest/python.py:183:
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _

capsys = <_pytest.capture.CaptureFixture object at 0x10cbaafb0>

    [94mdef[39;49;00m [92mtest_which_pauses_and_fails_and_has_stdout_1[39;49;00m(capsys):
        [96mprint[39;49;00m([33m"[39;49;00m[33mthis test pauses, then fails[39;49;00m[33m"[39;49;00m)
        time.sleep([94m2[39;49;00m)
>       [94massert[39;49;00m [94m0[39;49;00m == -[94m11[39;49;00m
E       assert 0 == -11

tests/test_pytest_fold.py:115: AssertionError
==>MARKER2<==
------------------------------------------------------------------- Captured stdout call -------------------------------------------------------------------
this test pauses, then fails
================================================================= short test summary info ==================================================================
FAILED tests/test_pytest_fold.py::test_which_fails_1 - assert 0
FAILED tests/test_pytest_fold.py::test_which_fails_2 - assert 0
FAILED tests/test_pytest_fold.py::test_which_fails_3 - assert 0
FAILED tests/test_pytest_fold.py::test_fail_1 - assert False
FAILED tests/test_pytest_fold.py::test_fail_2 - assert False
FAILED tests/test_pytest_fold.py::test_fail_3 - assert False
FAILED tests/test_pytest_fold.py::test_which_fails_and_has_stdout_1 - assert 0 == 1
FAILED tests/test_pytest_fold.py::test_which_pauses_and_fails_and_has_stdout_1 - assert 0 == -11
ERROR tests/test_pytest_fold.py::test_fixture_for_fun_fail
=========================================================== [31m[1m8 failed[0m, [32m9 passed[0m, [31m[1m1 error[0m[31m in 3.28s[0m[31m ===========================================================
